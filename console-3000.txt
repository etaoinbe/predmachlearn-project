> # What you should submit
> # 
> # The goal of your project is to predict the manner in which they did the exercise. This is the "classe" variable
> # in the training set. You may use any of the other variables to predict with. You should create a report describing 
> # how you built your model, how you used cross validation, what you think the expected out of sample error is, and why
> # you made the choices you did. You will also use your prediction model to predict 20 different test cases. 
> # 
> # 1. Your submission should consist of a link to a Github repo with your R markdown and compiled HTML file describing
> # your analysis. Please constrain the text of the writeup to < 2000 words and the number of figures to be less than 5.
> # It will make it easier for the graders if you submit a repo with a gh-pages branch so the HTML page can be viewed 
> # online (and you always want to make it easy on graders :-).
> # 2. You should also apply your machine learning algorithm to the 20 test cases available in the test data above. 
> # Please submit your predictions in appropriate format to the programming assignment for automated grading. 
> # See the programming assignment for additional details. 
> # 
> # Reproducibility 
> # 
> # Due to security concerns with the exchange of R code, your code will not be run during the evaluation by your
> # classmates. Please be sure that if they download the repo, they will be able to view the compiled HTML version of your
> # analysis. 
> # C:\data\git\predmachlearn-project 
> 
> library(caret)
> library(rattle)
> #http://groupware.les.inf.puc-rio.br/public/papers/2013.Velloso.QAR-WLE.pdf
> 
> #
> testmethod="rf"
> #testmethod="rpart" 
> 
> #####################
> # TRAINING
> #####################
> 
> #setwd("C:\\data\\lectures\\predmachlearn\\project") 
> setwd("e:\\data-e\\project") 
> 
> #training <- read.csv("pml-training.csv")
> #xx  <- read.csv("pml-training.csv",as.is=T,stringsAsFactors=F)
> 
> training <- read.csv("pml-training.csv",as.is=T,stringsAsFactors=F)
> 
> ns=names(training)
> for(i in 1:length(ns)) { 
+   name=ns[i] 
+   if(  name!="classe") { 
+     if( typeof(training[,name])=="character"  ) { cat("!!!",name);
+                                                    training[, c(name)]=as.numeric( training[, c(name)] )  ;
+     }
+     #print(sprintf("types tr %s    name %s ",typeof(training[, c(name)]), name ) )
+   }}
!!! user_name!!! cvtd_timestamp!!! new_window!!! kurtosis_roll_belt!!! kurtosis_picth_belt!!! kurtosis_yaw_belt!!! skewness_roll_belt!!! skewness_roll_belt.1!!! skewness_yaw_belt!!! max_yaw_belt!!! min_yaw_belt!!! amplitude_yaw_belt!!! kurtosis_roll_arm!!! kurtosis_picth_arm!!! kurtosis_yaw_arm!!! skewness_roll_arm!!! skewness_pitch_arm!!! skewness_yaw_arm!!! kurtosis_roll_dumbbell!!! kurtosis_picth_dumbbell!!! kurtosis_yaw_dumbbell!!! skewness_roll_dumbbell!!! skewness_pitch_dumbbell!!! skewness_yaw_dumbbell!!! max_yaw_dumbbell!!! min_yaw_dumbbell!!! amplitude_yaw_dumbbell!!! kurtosis_roll_forearm!!! kurtosis_picth_forearm!!! kurtosis_yaw_forearm!!! skewness_roll_forearm!!! skewness_pitch_forearm!!! skewness_yaw_forearm!!! max_yaw_forearm!!! min_yaw_forearm!!! amplitude_yaw_forearmThere were 36 warnings (use warnings() to see them)
> training$classe=as.factor(training$classe)
> 
> #training<- training[ sample(dim(training)[1], 100), ] #!!!
> 
> qplot(seq_along(training$classe),training$classe)
> qplot(training$X,training$classe)
> 
> excludes="timestamp|X|user_name|new_window"
> 
> #training<-training[,colSums(is.na(training)) < nrow(training) ] 
> #testing<-testingsrc[,colSums(is.na(testingsrc)) < nrow(testingsrc) ]
> #training1 <- subset( trainingsrc, select = -X )
> NAs <- apply(training,2,function(x) {sum(is.na(x))}) 
> training <- training[,which(NAs == 0)] 
> removeIndex <- grep(excludes, names(training))
> training <- training[,-removeIndex]
> 
> 
> if(testmethod=="rpart") {
+   set.seed(975)
+   modfit=train(training$classe ~ ., method="rpart", data=training )
+   print(modfit$finalModel)
+   jpeg("modfittree.jpg")
+   plot(modfit$finalModel,uniform=TRUE,main="tree")
+   text(modfit$finalModel,use.n=TRUE,all=TRUE,cex=.8)
+   dev.off()
+   jpeg("fancytree.jpeg")
+   fancyRpartPlot(modfit$finalModel)
+   dev.off()
+   
+   confusionMatrix(training$classe, predict(modfit, training))
+ }
> 
> ### 
> if(testmethod=="rf") {  
+ #  training<- training[ sample(dim(training)[1], 100), ] #!!!
+   training<- training[ sample(dim(training)[1], 3000), ] #!!!
+ 
+   modfitrf=train(training$classe ~ ., method="rf", data=training, prox=TRUE )
+   confusionMatrix(training$classe, predict(modfitrf, training))
+ }
Confusion Matrix and Statistics

          Reference
Prediction   A   B   C   D   E
         A 820   0   0   0   0
         B   0 590   0   0   0
         C   0   0 521   0   0
         D   0   0   0 510   0
         E   0   0   0   0 559

Overall Statistics
                                     
               Accuracy : 1          
                 95% CI : (0.9988, 1)
    No Information Rate : 0.2733     
    P-Value [Acc > NIR] : < 2.2e-16  
                                     
                  Kappa : 1          
 Mcnemar's Test P-Value : NA         

Statistics by Class:

                     Class: A Class: B Class: C Class: D Class: E
Sensitivity            1.0000   1.0000   1.0000     1.00   1.0000
Specificity            1.0000   1.0000   1.0000     1.00   1.0000
Pos Pred Value         1.0000   1.0000   1.0000     1.00   1.0000
Neg Pred Value         1.0000   1.0000   1.0000     1.00   1.0000
Prevalence             0.2733   0.1967   0.1737     0.17   0.1863
Detection Rate         0.2733   0.1967   0.1737     0.17   0.1863
Detection Prevalence   0.2733   0.1967   0.1737     0.17   0.1863
Balanced Accuracy      1.0000   1.0000   1.0000     1.00   1.0000
Warning message:
package ‘e1071’ was built under R version 3.0.3 
> 
> #####################
> # TESTING
> #####################
> testing <- read.csv("pml-testing.csv",as.is=T,stringsAsFactors=F)
> ns=names(testing)
> for(i in 1:length(ns)) { 
+   name=ns[i] 
+   if(  name!="classe") { 
+     if( typeof(testing[,name])=="character"  ) { cat("!!!",name);
+                                                   testing[, c(name)]=as.numeric( testing[, c(name)] )  ;
+     }
+     print(sprintf("types tr %s    name %s ",typeof(testing[, c(name)]), name ) )
+   }}
[1] "types tr integer    name X "
!!! user_name[1] "types tr double    name user_name "
[1] "types tr integer    name raw_timestamp_part_1 "
[1] "types tr integer    name raw_timestamp_part_2 "
!!! cvtd_timestamp[1] "types tr double    name cvtd_timestamp "
!!! new_window[1] "types tr double    name new_window "
[1] "types tr integer    name num_window "
[1] "types tr double    name roll_belt "
[1] "types tr double    name pitch_belt "
[1] "types tr double    name yaw_belt "
[1] "types tr integer    name total_accel_belt "
[1] "types tr logical    name kurtosis_roll_belt "
[1] "types tr logical    name kurtosis_picth_belt "
[1] "types tr logical    name kurtosis_yaw_belt "
[1] "types tr logical    name skewness_roll_belt "
[1] "types tr logical    name skewness_roll_belt.1 "
[1] "types tr logical    name skewness_yaw_belt "
[1] "types tr logical    name max_roll_belt "
[1] "types tr logical    name max_picth_belt "
[1] "types tr logical    name max_yaw_belt "
[1] "types tr logical    name min_roll_belt "
[1] "types tr logical    name min_pitch_belt "
[1] "types tr logical    name min_yaw_belt "
[1] "types tr logical    name amplitude_roll_belt "
[1] "types tr logical    name amplitude_pitch_belt "
[1] "types tr logical    name amplitude_yaw_belt "
[1] "types tr logical    name var_total_accel_belt "
[1] "types tr logical    name avg_roll_belt "
[1] "types tr logical    name stddev_roll_belt "
[1] "types tr logical    name var_roll_belt "
[1] "types tr logical    name avg_pitch_belt "
[1] "types tr logical    name stddev_pitch_belt "
[1] "types tr logical    name var_pitch_belt "
[1] "types tr logical    name avg_yaw_belt "
[1] "types tr logical    name stddev_yaw_belt "
[1] "types tr logical    name var_yaw_belt "
[1] "types tr double    name gyros_belt_x "
[1] "types tr double    name gyros_belt_y "
[1] "types tr double    name gyros_belt_z "
[1] "types tr integer    name accel_belt_x "
[1] "types tr integer    name accel_belt_y "
[1] "types tr integer    name accel_belt_z "
[1] "types tr integer    name magnet_belt_x "
[1] "types tr integer    name magnet_belt_y "
[1] "types tr integer    name magnet_belt_z "
[1] "types tr double    name roll_arm "
[1] "types tr double    name pitch_arm "
[1] "types tr double    name yaw_arm "
[1] "types tr integer    name total_accel_arm "
[1] "types tr logical    name var_accel_arm "
[1] "types tr logical    name avg_roll_arm "
[1] "types tr logical    name stddev_roll_arm "
[1] "types tr logical    name var_roll_arm "
[1] "types tr logical    name avg_pitch_arm "
[1] "types tr logical    name stddev_pitch_arm "
[1] "types tr logical    name var_pitch_arm "
[1] "types tr logical    name avg_yaw_arm "
[1] "types tr logical    name stddev_yaw_arm "
[1] "types tr logical    name var_yaw_arm "
[1] "types tr double    name gyros_arm_x "
[1] "types tr double    name gyros_arm_y "
[1] "types tr double    name gyros_arm_z "
[1] "types tr integer    name accel_arm_x "
[1] "types tr integer    name accel_arm_y "
[1] "types tr integer    name accel_arm_z "
[1] "types tr integer    name magnet_arm_x "
[1] "types tr integer    name magnet_arm_y "
[1] "types tr integer    name magnet_arm_z "
[1] "types tr logical    name kurtosis_roll_arm "
[1] "types tr logical    name kurtosis_picth_arm "
[1] "types tr logical    name kurtosis_yaw_arm "
[1] "types tr logical    name skewness_roll_arm "
[1] "types tr logical    name skewness_pitch_arm "
[1] "types tr logical    name skewness_yaw_arm "
[1] "types tr logical    name max_roll_arm "
[1] "types tr logical    name max_picth_arm "
[1] "types tr logical    name max_yaw_arm "
[1] "types tr logical    name min_roll_arm "
[1] "types tr logical    name min_pitch_arm "
[1] "types tr logical    name min_yaw_arm "
[1] "types tr logical    name amplitude_roll_arm "
[1] "types tr logical    name amplitude_pitch_arm "
[1] "types tr logical    name amplitude_yaw_arm "
[1] "types tr double    name roll_dumbbell "
[1] "types tr double    name pitch_dumbbell "
[1] "types tr double    name yaw_dumbbell "
[1] "types tr logical    name kurtosis_roll_dumbbell "
[1] "types tr logical    name kurtosis_picth_dumbbell "
[1] "types tr logical    name kurtosis_yaw_dumbbell "
[1] "types tr logical    name skewness_roll_dumbbell "
[1] "types tr logical    name skewness_pitch_dumbbell "
[1] "types tr logical    name skewness_yaw_dumbbell "
[1] "types tr logical    name max_roll_dumbbell "
[1] "types tr logical    name max_picth_dumbbell "
[1] "types tr logical    name max_yaw_dumbbell "
[1] "types tr logical    name min_roll_dumbbell "
[1] "types tr logical    name min_pitch_dumbbell "
[1] "types tr logical    name min_yaw_dumbbell "
[1] "types tr logical    name amplitude_roll_dumbbell "
[1] "types tr logical    name amplitude_pitch_dumbbell "
[1] "types tr logical    name amplitude_yaw_dumbbell "
[1] "types tr integer    name total_accel_dumbbell "
[1] "types tr logical    name var_accel_dumbbell "
[1] "types tr logical    name avg_roll_dumbbell "
[1] "types tr logical    name stddev_roll_dumbbell "
[1] "types tr logical    name var_roll_dumbbell "
[1] "types tr logical    name avg_pitch_dumbbell "
[1] "types tr logical    name stddev_pitch_dumbbell "
[1] "types tr logical    name var_pitch_dumbbell "
[1] "types tr logical    name avg_yaw_dumbbell "
[1] "types tr logical    name stddev_yaw_dumbbell "
[1] "types tr logical    name var_yaw_dumbbell "
[1] "types tr double    name gyros_dumbbell_x "
[1] "types tr double    name gyros_dumbbell_y "
[1] "types tr double    name gyros_dumbbell_z "
[1] "types tr integer    name accel_dumbbell_x "
[1] "types tr integer    name accel_dumbbell_y "
[1] "types tr integer    name accel_dumbbell_z "
[1] "types tr integer    name magnet_dumbbell_x "
[1] "types tr integer    name magnet_dumbbell_y "
[1] "types tr integer    name magnet_dumbbell_z "
[1] "types tr double    name roll_forearm "
[1] "types tr double    name pitch_forearm "
[1] "types tr double    name yaw_forearm "
[1] "types tr logical    name kurtosis_roll_forearm "
[1] "types tr logical    name kurtosis_picth_forearm "
[1] "types tr logical    name kurtosis_yaw_forearm "
[1] "types tr logical    name skewness_roll_forearm "
[1] "types tr logical    name skewness_pitch_forearm "
[1] "types tr logical    name skewness_yaw_forearm "
[1] "types tr logical    name max_roll_forearm "
[1] "types tr logical    name max_picth_forearm "
[1] "types tr logical    name max_yaw_forearm "
[1] "types tr logical    name min_roll_forearm "
[1] "types tr logical    name min_pitch_forearm "
[1] "types tr logical    name min_yaw_forearm "
[1] "types tr logical    name amplitude_roll_forearm "
[1] "types tr logical    name amplitude_pitch_forearm "
[1] "types tr logical    name amplitude_yaw_forearm "
[1] "types tr integer    name total_accel_forearm "
[1] "types tr logical    name var_accel_forearm "
[1] "types tr logical    name avg_roll_forearm "
[1] "types tr logical    name stddev_roll_forearm "
[1] "types tr logical    name var_roll_forearm "
[1] "types tr logical    name avg_pitch_forearm "
[1] "types tr logical    name stddev_pitch_forearm "
[1] "types tr logical    name var_pitch_forearm "
[1] "types tr logical    name avg_yaw_forearm "
[1] "types tr logical    name stddev_yaw_forearm "
[1] "types tr logical    name var_yaw_forearm "
[1] "types tr double    name gyros_forearm_x "
[1] "types tr double    name gyros_forearm_y "
[1] "types tr double    name gyros_forearm_z "
[1] "types tr integer    name accel_forearm_x "
[1] "types tr integer    name accel_forearm_y "
[1] "types tr integer    name accel_forearm_z "
[1] "types tr integer    name magnet_forearm_x "
[1] "types tr integer    name magnet_forearm_y "
[1] "types tr integer    name magnet_forearm_z "
[1] "types tr integer    name problem_id "
Warning messages:
1: NAs introduced by coercion 
2: NAs introduced by coercion 
3: NAs introduced by coercion 
> 
> #NAs2 <- apply(testing,2,function(x) {sum(is.na(x))}) 
> testing <- testing[,which(NAs == 0)] 
> #testing<-testing[,colSums(is.na(testing)) < nrow(testing) ] 
> 
> removeIndex <- grep(excludes,names(testing))
> #testing <- subset( testing, select = removeIndex )
> testing <- testing[,-removeIndex]
> table(training$classe)

  A   B   C   D   E 
820 590 521 510 559 
> plot(table(training$classe))
> if(testmethod=="rpart") {
+   predict(modfit, testing, verbose = TRUE)
+ }
> if(testmethod=="rf") {
+   predict(modfitrf, testing, verbose = TRUE)
+ }
Number of training samples: 3000 
Number of test samples:     0 

rf : 20 unknown predictions were added

 [1] B A B A A E D B A A B C B A E E A B B B
Levels: A B C D E
> 
> 
> 
> 
